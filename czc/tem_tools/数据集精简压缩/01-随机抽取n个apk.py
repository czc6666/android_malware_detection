import os
import random
import shutil
from tqdm import tqdm
from static import get_project_root, get_dataset_name

def random_extract_apks(src_dir, dst_dir, n, copy=True):
    """
    从源目录随机提取n个APK文件到目标目录
    
    Args:
        src_dir (str): 源目录路径
        dst_dir (str): 目标目录路径
        n (int): 需要提取的APK文件数量
        copy (bool): True表示复制文件，False表示移动文件
    """
    # 确保目标目录存在
    os.makedirs(dst_dir, exist_ok=True)
    
    # 获取所有APK文件列表
    apk_files = [f for f in os.listdir(src_dir) if f.endswith('.apk')]
    total_apks = len(apk_files)
    
    # 检查请求数量是否合理
    if n > total_apks:
        print(f"警告: 请求提取{n}个文件，但源目录只有{total_apks}个APK文件")
        n = total_apks
    
    print(f"源目录中共有 {total_apks} 个APK文件")
    print(f"将随机提取 {n} 个文件")
    
    # 随机选择n个文件
    selected_files = random.sample(apk_files, n)
    
    # 创建进度条
    print(f"{'复制' if copy else '移动'}文件中...")
    for apk in tqdm(selected_files):
        src_path = os.path.join(src_dir, apk)
        dst_path = os.path.join(dst_dir, apk)
        
        try:
            if copy:
                shutil.copy2(src_path, dst_path)  # copy2保留文件元数据
            else:
                shutil.move(src_path, dst_path)
        except Exception as e:
            print(f"处理文件 {apk} 时出错: {str(e)}")
    
    # 打印统计信息
    print(f"\n完成! 已{'复制' if copy else '移动'} {len(selected_files)} 个文件到 {dst_dir}")
    
    # 保存提取的文件列表
    log_file = os.path.join(dst_dir, 'extracted_files.txt')
    with open(log_file, 'w') as f:
        for file in selected_files:
            f.write(f"{file}\n")
    print(f"已将提取的文件列表保存到: {log_file}")
    
    return selected_files

if __name__ == "__main__":
    # 在这里设置你的参数
    source_dir = get_project_root() + 'dataset/' + get_dataset_name()      # 源目录路径
    destination_dir = get_project_root() + 'dataset/' + get_dataset_name() + '_new'   # 目标目录路径
    num_files = 1500                               # 要提取的文件数量
    copy_mode = True                              # True为复制，False为移动
    
    try:
        random_extract_apks(source_dir, destination_dir, num_files, copy=copy_mode)
    except Exception as e:
        print(f"错误: {str(e)}")