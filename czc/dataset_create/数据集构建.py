import os
import shutil
import random
import time

# 一行添加上上级目录到python路径
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from static import get_project_root, get_dataset_name

def create_dataset(source_dir, output_dir, label_file_path):  
    # 函数功能：将源目录下的w和b文件夹中的apk移动到输出目录下，并记录在标签文件中
    # source_dir：源目录，包含w和b两个子文件夹
    # output_dir：输出目录，用于存放移动后的apk
    # label_file_path：标签文件路径，用于记录已经处理过的apk，防止重复处理

    def process_apks(src_dir, output_dir, label_file, processed_apks, label):  
        # 函数功能：将src_dir目录下的apk移动到output_dir目录下，并记录在标签文件中
        for apk in os.listdir(src_dir):  # 遍历src_dir目录下的所有文件
            if apk.endswith('.apk') and apk not in processed_apks:  # 如果文件是apk文件且未被处理过
                # 写入标签文件
                label_file.write(f"{apk} {label}\n")  
                # 移动APK文件
                src_path = os.path.join(src_dir, apk)  # 源路径
                dst_path = os.path.join(output_dir, apk)  # 目标路径
                if os.path.exists(dst_path):  # 如果目标路径已存在
                    print(f"Warning: {apk} already exists in the output directory. Skipping.")
                else:
                    if 是否删除源文件夹:
                        shutil.move(src_path, dst_path)  # 移动APK文件
                    else:
                        shutil.copy(src_path, dst_path)  # 复制APK文件
                print(f"处理完成: {apk}")

    # 确保输出目录存在
    os.makedirs(output_dir, exist_ok=True)
    
    # 读取现有的标签文件，获取已处理的APK列表
    processed_apks = set()
    if os.path.exists(label_file_path):
        with open(label_file_path, 'r') as f:
            processed_apks = set(line.split()[0] for line in f)
    
    # 打开标签文件准备追加写入
    with open(label_file_path, 'a') as f:
        # 处理良性APK
        w_dir = os.path.join(source_dir, 'w')
        process_apks(w_dir, output_dir, f, processed_apks, 'w')
        
        # 处理恶意APK
        b_dir = os.path.join(source_dir, 'b')
        process_apks(b_dir, output_dir, f, processed_apks, 'b')

    print(f"数据集升级完成，新的apk已移动到输出目录{output_dir}，标签文件已追加{label_file_path}。")

def 标签文件分割成训练集和测试集(input_file, output_prefix):

    input_file = label_file_path  # 您的原始标签文件

    def split_dataset(input_file, train_ratio=0.8):  # 函数功能：将输入文件中的数据按比例分割为训练集和测试集
        # 输入：
        # input_file：输入文件路径，包含所有apk的标签
        # train_ratio：训练集比例，默认为0.8
        with open(input_file, 'r') as f:
            lines = f.readlines()
        # 随机打乱数据
        random.shuffle(lines)
        # 计算分割点
        split_point = int(len(lines) * train_ratio)
        # 分割数据
        train_data = lines[:split_point]
        test_data = lines[split_point:]
        return train_data, test_data

    def write_files(data, filelist_path):  # 函数功能：将数据写入文件
        # 输入：
        # data：数据列表
        # filelist_path：文件路径，用于存放训练集或测试集
        # filter_path：文件路径，用于存放过滤后的数据

        # 写入文件
        with open(filelist_path, 'w') as f:
            f.writelines(data)

    train_data, test_data = split_dataset(input_file)
    
    # 创建训练集文件
    write_files(train_data, f"{标签文件路径前缀}/{数据集名称}_train.filelist")
    print(f"❤️❤️❤️训练集文件已创建：{标签文件路径前缀}/{数据集名称}_train.filelist")
    
    # 创建测试集文件
    write_files(test_data, f"{标签文件路径前缀}/{数据集名称}_test.filelist")  
    print(f"❤️❤️❤️测试集文件已创建：{标签文件路径前缀}/{数据集名称}_test.filelist")
    print("数据集分割完成。")


if __name__ == "__main__":
    是否删除源文件夹 = True  # 是否删除源文件夹，True为删除，False为不删除

    数据集名称 = get_dataset_name()
    apk数据集源目录 = '/home/czc/windisk/f/数据集/成品数据集'  # 目录下包含w和b两个子文件夹

    # 源目录，这个目录下包含w和b两个子文件夹，用于放良性和恶意两种apk，w和b用于后面的数据集标签文件生成
    source_directory = f'{apk数据集源目录}/{数据集名称}'

    # 输出目录，会将所有w和b的apk移动到这个目录下
    # output_directory = f'{get_project_root()}/dataset/{数据集名称}'  # 新的数据集目录
    output_directory = f'/home/czc/windisk/f/数据集/成品数据集/{数据集名称}'  # 新的数据集目录

    # 如果输出目录不存在，则创建
    os.makedirs(output_directory, exist_ok=True)

    # 标签文件路径，用于记录已经处理过的apk，防止重复处理
    标签文件路径前缀 = f'{get_project_root()}/code/android_malware_detection/data'  # 这里不用改，这是标签文件路径前缀
    label_file_path = f'{标签文件路径前缀}/{数据集名称}_labels.txt'  # 标签文件完整路径

    create_dataset(source_directory, output_directory, label_file_path)  # 构建数据集
    标签文件分割成训练集和测试集(label_file_path, 数据集名称)  # 分割数据集标签文件成训练集和测试集
