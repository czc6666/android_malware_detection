import os
import shutil
import sys
# 一行添加上级目录到python路径
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from static import get_dataset_name

def remove_dataset_folders(dataset_name):
    """
    删除指定数据集在各个目录下的文件夹
    
    Args:
        dataset_name: 要删除的数据集名称
    """
    # 项目根目录
    PROJECT_ROOT = '/home/czc/code/Android_Malware_Detection'
    
    # 需要清理的目录列表
    base_dirs = [
        '3rd',
        'apk_tool',
        'permission',
        'java',
        'tokenResult',
        'java_src_tmp',
        'class_set_call_graph',
        'tokenClassSet',
        'model'
    ]
    
    removed_count = 0
    failed_paths = []
    
    # 检查项目根目录是否存在
    if not os.path.exists(PROJECT_ROOT):
        print(f"错误: 项目根目录不存在: {PROJECT_ROOT}")
        return
    
    for base_dir in base_dirs:
        # 使用绝对路径
        target_path = os.path.join(PROJECT_ROOT, base_dir, dataset_name)

        # 确认删除
        confirm = input(f"确定要删除数据集 '{dataset_name}' 在{base_dir}目录下的文件夹吗? (y/n): ")
        if confirm.lower() != 'y':
            print("操作已取消")
            continue
        
        try:
            if os.path.exists(target_path):
                if os.path.isdir(target_path):
                    shutil.rmtree(target_path)
                else:
                    os.remove(target_path)
                removed_count += 1
                print(f"已删除: {target_path}")
            else:
                print(f"目录不存在，跳过: {target_path}")
                
        except PermissionError:
            failed_paths.append((target_path, "权限不足"))
            print(f"删除失败 {target_path}: 权限不足")
        except Exception as e:
            failed_paths.append((target_path, str(e)))
            print(f"删除失败 {target_path}: {str(e)}")
    
    # 打印总结信息
    print("\n清理完成:")
    print(f"成功删除 {removed_count} 个目录/文件")
    
    if failed_paths:
        print("\n以下路径删除失败:")
        for path, error in failed_paths:
            print(f"- {path}: {error}")


if __name__ == "__main__":
    # 获取用户输入的数据集名称
    dataset_name = get_dataset_name()
    
    remove_dataset_folders(dataset_name)
