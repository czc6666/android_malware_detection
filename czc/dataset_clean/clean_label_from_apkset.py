import os
import time

import sys

# 一行添加上上级目录
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from static import get_dataset_name, get_project_root

def get_existing_apks(directory):
    """获取目录下所有的APK文件名"""
    existing_apks = set()
    for file in os.listdir(directory):
        if file.endswith('.apk'):
            existing_apks.add(file)
    return existing_apks

def clean_label_file(label_file, existing_apks):
    """清理标签文件，只保留存在的APK的标签"""
    # 读取原始标签
    with open(label_file, 'r') as f:
        lines = f.readlines()
    
    # 过滤标签
    cleaned_lines = []
    for line in lines:
        apk_name = line.strip().split()[0]
        if apk_name in existing_apks:
            cleaned_lines.append(line)
    
    # 写回文件
    with open(label_file, 'w') as f:
        f.writelines(cleaned_lines)
    
    removed_count = len(lines) - len(cleaned_lines)
    print(f'从 {label_file} 中删除了 {removed_count} 个不存在的APK标签')

def main(dataset):

    # 配置文件路径
    dataset_dir = get_project_root() + 'dataset/' + dataset  # APK文件目录
    labels_files = [
        get_project_root() + 'code/android_malware_detection/data/' + dataset + '_train.filelist',
        get_project_root() + 'code/android_malware_detection/data/' + dataset + '_test.filelist'
    ]

    print(f'搜索apk数据集目录: {dataset_dir}')
    print(f'清理标签文件: {labels_files}')

    time.sleep(3)
    # 获取现有的APK文件
    existing_apks = get_existing_apks(dataset_dir)
    print(f'数据集目录中共有 {len(existing_apks)} 个APK文件')

    # 清理每个标签文件
    for label_file in labels_files:
        clean_label_file(label_file, existing_apks)

def clean_label(dataset):

    main(dataset)

if __name__ == '__main__':
    dataset = get_dataset_name()

    main(dataset)
