'''
这个脚本用于从Android应用程序的AndroidManifest.xml文件中提取权限信息。
它读取一个包含所有已知Android权限的文本文件（permission.txt），然后遍历指定目录下的所有AndroidManifest.xml文件，
从中提取这些权限的使用情况，并将结果保存到指定的输出目录中。

主要功能包括：
- 从permission.txt中加载所有已知的Android权限。
- 遍历指定目录下的所有APK输出文件夹。
- 对每个APK的AndroidManifest.xml文件进行权限特征提取。
- 将每个权限的出现次数作为特征，保存到指定的结果文件中。

这些特征可以用于Android应用的安全性分析，例如在机器学习模型中用于恶意软件检测或分类。
'''

# -*- coding: utf-8 -*-
import os
import sys
from multiprocessing import Pool


def extractPermission(manifestDirPath, permissionExtractResDirPath):  # 提取permission列表
    permissionList = []  # 权限列表
    permissionFile = open('Permission/permission.txt', 'r')  # 读取权限列表
    lines = permissionFile.readlines()  # 读取权限列表的每一行
    for line in lines:
        permissionList.append(line.strip('\n'))  # 将权限列表的每一行添加到权限列表中
    permissionFile.close()

    # p = Pool(processes=processNum)

    apkOutList = os.listdir(manifestDirPath)  # 获取manifest目录下的所有文件
    for apkOut in apkOutList:  # 遍历manifest目录下的所有文件
        apkName = apkOut  # 获取apk的名称
        # p.apply_async(featureExtract, [permissionList, manifestDirPath + '/' + apkOut + '/AndroidManifest.xml', permissionExtractResDirPath + '/' + apkName + '.permission', ])
        featureExtract(permissionList, manifestDirPath + '/' + apkOut + '/AndroidManifest.xml',
                         permissionExtractResDirPath + '/' + apkName + '.permission')  # 调用featureExtract函数提取权限特征

    # p.close()
    # p.join()


def read_src_to_string(filePath):  # 读取文件内容
    if not os.path.isfile(filePath):  # 如果文件不存在，则抛出异常
        raise TypeError(filePath + " does not exist")

    all_the_text = open(filePath).read()  # 读取文件内容
    return all_the_text


def featureExtract(permissionList, srcFilePath, resFilePath):  # 提取权限特征
    features = {}  # 特征字典
    resFile = open(resFilePath, 'w')  # 打开结果文件
    try:
        source_code = str(read_src_to_string(srcFilePath))  # 读取源文件内容

        for permission in permissionList:
            features[permission] = source_code.count(permission)  # 统计每个权限的出现次数


    except Exception as e:  # 如果出现异常，则打印异常信息
        print ("Error"+str(e)+" in file "+srcFilePath)  # 打印异常信息

        default_val = -1  # 默认值
        for permission in permissionList:
            features[permission] = default_val  # 设置每个权限的默认值

    for permission in permissionList:
        resFile.write(str(features[permission]) + ' ')  # 将每个权限的出现次数写入结果文件
    resFile.close()  # 关闭结果文件


if __name__ == '__main__':
    # processControl(1, '/data2/android_malware_detection/apk_tool/AndroZoo/white/manifest/',
    #                   # '/audr/syc_disk/syc/AndroZoo_white/Androzoo_white_4_manifest',
    #                '/data2/android_malware_detection/features/AndroZoo/white/')
    extractPermission(1, '/home/alvin/Desktop/test1/', '/home/alvin/Desktop/')  # 提取权限特征

    # czc的注释：
    # 是一个常用的模式，用来判断当前脚本是否是作为主程序运行，而不是被其他模块导入。
    # 这里的 __name__ 是当前模块的名称，当模块被直接运行时，__name__ 的值是 '__main__'，而当模块被导入时，__name__ 将是模块的名字。
    # 因此，当这个脚本文件被直接运行时（例如通过命令行运行或作为主程序执行），if __name__ == '__main__': 
    # 下面的代码块将会执行。但是，如果这个脚本被其他Python文件导入为一个模块，那么这部分代码不会执行。
