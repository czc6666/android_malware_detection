# coding=utf-8

"""
这里第一步先对标签数据进行清洗，用自己写的方法（1.main已经删除了错误apk）

数据集：czc_dataset_VS_Drebin_AndroZoo 6000个apk，运行时间: 11809.45 秒

数据集：czc_dataset_4个6000个apk，总运行时间: 9978.65 秒
数据集：czc_dataset_5个5000个apk，总运行时间: 28959.77 秒
"""

import os
from Decompilation.apktool import apktool
from Decompilation.jar2java import jar2java
from static import get_apk_path, get_lsi_config, get_xgboost_config, get_cscg_config, get_graph_config
from static import total_process_multi_core, total_process_single_core, java_src_tmp_path, ts_max, min_k_tmp_file
from static import get_dataset_name
from lexical_analysis.extract_token import extract_token
from Permission.permissionExtract import extractPermission
from dataset_construct.create_filelist import create_filelist
import time
from czc.dataset_clean.clean_label_from_apkset import clean_label


program_root = os.getcwd()
# 添加apktool的环境变量
os.environ["PATH"] = program_root + '/tools/apktool/' + ":" + os.environ["PATH"]
# 添加jadx的环境变量
os.environ["PATH"] = program_root + '/tools/jadx/build/jadx/bin/' + ":" + os.environ["PATH"]


# 对原始APK文件进行预处理，包括反编译等,在python3.6下运行
def preproces(dataset):

    print('🔍🔍🔍🔍🔍开始清理标签文件')
    time.sleep(2)
    clean_label(dataset)
    print('🔍🔍🔍🔍🔍清理标签文件完成')

    apk_path, manifest_path, dex_path, java_path, _3rd_path, permission_path, token_path, filelist_train, filelist_test, filelist_train_filter, filelist_test_filter = get_apk_path(dataset)

    # 2.使用apktool获取每个文件的Androidmanifest.xml和class.dex,在python2.7下运行
    # 提取xml和dex
    apktool(apk_path, manifest_path, dex_path, total_process_multi_core)

    # 3.使用jadx对每个class.dex进行反编译，并将反编译的全部java文件打包生成.zip的压缩包,在python3.6下运行
    # 反编译dex出java代码打包成zip
    jar2java(dex_path, java_path, java_src_tmp_path, program_root, total_process_multi_core)

    '''
    在DirAndFile.extractToken方法中，对于每个Java文件，它首先使用FileUtil.readFile读取文件内容，
    然后创建一个TestLexer实例，并调用analyse方法来提取tokens。
    提取的tokens被存储在DirAndFile.tokenResult列表中，最后这些tokens可以被写入到一个结果文件中。
    '''
    # 4.对每个反编译得到的java文件进行token提取,在python3.6下运行
    # 提取token，token也叫词法单元，通常包括关键字、标识符、常数、运算符等。
    extract_token(dataset, _3rd_path, java_path, manifest_path, token_path, total_process_single_core)

    # 5.对每个manifest文件提取权限特征,在python3.6下运行
    # 提取xml的权限特征，59维权限特征
    extractPermission(manifest_path, permission_path)

    # 6.生成记录每个数据集下全部有效数据的文件filelist.txt,在python3.6下运行（狗屁不通）
    # 😥创建过滤（第三方库）后的文件列表。。6.为训练数据集生成包含所有有效数据文件路径的filelist.txt文件（czc的注释）
    create_filelist(filelist_train, filelist_train_filter, _3rd_path, manifest_path, java_path)

    # 7.生成记录每个数据集下全部有效数据的文件filelist.txt,在python3.6下运行（狗屁不通）
    # 7.为测试数据集生成包含所有有效数据文件路径的filelist.txt文件（czc的注释）
    create_filelist(filelist_test, filelist_test_filter, _3rd_path, manifest_path, java_path)


def main():
    # 收集开始时间
    start_time = time.time()

    dataset = get_dataset_name()  # 数据集名称
    preproces(dataset)  # 预处理函数

    # 收集结束时间
    end_time = time.time()
    print("2.py的运行时间: {:.2f} 秒".format(end_time - start_time))

if __name__ == '__main__':
    main()

    
